<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        				   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        				   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        				   http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">

    <cache:annotation-driven cache-manager="cacheManager"/>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
          p:cache-manager-ref="ehcache"/>
    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
          p:config-location="classpath:ehcache.xml"/>

    <context:annotation-config/>
    <!-- 扫描带有@Service注解的类 ,让 springMVC 子容器加载-->
    <context:component-scan base-package="com.k3k.unplat.service">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 扫描带有@Repository注解的类 ,让 springMVC 子容器加载-->
    <context:component-scan base-package="com.k3k.unplat.dao">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 定义受环境影响易变的变量 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath*:config.properties</value>
            </list>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="multipleDataSource"></property>
    </bean>

    <!-- Logger DB -->
    <bean id="gameloggerDBDS" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
          destroy-method="close">
        <description>Local DB XA DataSource</description>
        <property name="uniqueResourceName" value="gameloggerDBDS"></property>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"></property>
        <property name="xaProperties">
            <props>
                <prop key="user">${gameloggerdb.jdbc.username}</prop>
                <prop key="password">${gameloggerdb.jdbc.password}</prop>
                <prop key="URL">${gameloggerdb.jdbc.url}</prop>
            </props>
        </property>
        <property name="poolSize" value="${atomikos.poolSize}"></property>
        <property name="minPoolSize" value="${atomikos.minPoolSize}"></property>
        <property name="maxPoolSize" value="${atomikos.maxPoolSize}"></property>
        <property name="borrowConnectionTimeout" value="${atomikos.borrowConnectionTimeout}"></property>
        <property name="maxLifetime" value="${atomikos.maxLifetime}"></property>
    </bean>

    <!-- slgDB系统库数据源 -->
    <bean id="slgDBDS" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
        <description>SLG DataSource</description>
        <property name="uniqueResourceName" value="slgDBDS"></property>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"></property>
        <property name="xaProperties">
            <props>
                <prop key="user">${SLGdb.jdbc.username}</prop>
                <prop key="password">${SLGdb.jdbc.password}</prop>
                <prop key="URL">${SLGdb.jdbc.url}</prop>
            </props>
        </property>
        <property name="poolSize" value="${atomikos.poolSize}"></property>
        <property name="minPoolSize" value="${atomikos.minPoolSize}"></property>
        <property name="maxPoolSize" value="${atomikos.maxPoolSize}"></property>
        <property name="borrowConnectionTimeout" value="${atomikos.borrowConnectionTimeout}"></property>
        <property name="maxLifetime" value="${atomikos.maxLifetime}"></property>
    </bean>

    <bean id="multipleDataSource" class="com.k3k.unplat.common.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="gameloggerDBDS"/>
        <property name="targetDataSources">
            <map>
                <entry key="gameloggerDBDS" value-ref="gameloggerDBDS"/>
                <entry key="slgDBDS" value-ref="slgDBDS"/>
            </map>
        </property>

    </bean>

    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="multipleDataSource"/>
        <!-- 自动扫描com/k3k/unplat/dao/mapping/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置
            value="classpath:com/k3k/unplat/dao/mapping/*.xml"指的是classpath(类路径)下com.k3k.unplat.dao.mapping包中的所有xml文件
            UserMapper.xml位于com.k3k.unplat.dao.mapping包下，这样UserMapper.xml就可以被自动扫描
         -->
        <property name="mapperLocations" value="classpath:com/k3k/unplat/dao/mapping/*.xml"/>
    </bean>
    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.k3k.unplat.dao这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.k3k.unplat.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- JTA事务管理器 -->
    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager">
            <bean class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close"
                  depends-on="userTransactionService">
                <property name="forceShutdown" value="true"/>
                <!-- Do not create a transaction service as we have specified the bean in this file -->
                <property name="startupTransactionService" value="false"/>
            </bean>
        </property>
        <property name="userTransaction">
            <bean class="com.atomikos.icatch.jta.UserTransactionImp"/>
        </property>
    </bean>

    <bean id="userTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp"
          init-method="init" destroy-method="shutdownForce">
        <constructor-arg>
            <!-- IMPORTANT: specify all Atomikos properties here -->
            <props>
                <prop key="com.atomikos.icatch.service">com.atomikos.icatch.standalone.UserTransactionServiceFactory
                </prop>
                <prop key="com.atomikos.icatch.console_log_level">ERROR</prop>
                <prop key="com.atomikos.icatch.output_dir">${atomikos.output_dir}</prop>
                <prop key="com.atomikos.icatch.log_base_dir">${atomikos.log_base_dir}</prop>
                <prop key="com.atomikos.icatch.console_file_name">${atomikos.console_file_name}</prop>
                <prop key="com.atomikos.icatch.log_base_name">${atomikos.log_base_name}</prop>
            </props>
        </constructor-arg>
    </bean>

    <!-- 注解式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>